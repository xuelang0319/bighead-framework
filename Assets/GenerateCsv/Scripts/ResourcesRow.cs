// <auto-generated>
// generated by RowCodeGenerator - Z.资源配置$Resources
using System;
using System.Collections.Generic;
using System.Globalization;
using UnityEngine;

namespace Bighead.Csv.Generated
{
    [Serializable]
    public class ResourcesRow
    {
        public int ID;
        public string Desc;
        public string Label;
        public string Path;
    }

    public static class ResourcesRowLoader
    {
        public static List<ResourcesRow> Load(string csv)
        {
            var list = new List<ResourcesRow>(128);
            if (string.IsNullOrEmpty(csv)) return list;
            var lines = csv.Split('\n');
            if (lines.Length <= 3) return list;
            for (int li = 3; li < lines.Length; li++)
            {
                var line = lines[li].TrimEnd('\r');
                if (string.IsNullOrWhiteSpace(line)) continue;
                var cells = CsvParsers.SplitCsvLine(line);
                if (cells == null || cells.Count == 0) continue;
                var row = new ResourcesRow();
                row.ID = CsvParsers.ParseInt(cells[0]); 
                row.Desc = CsvParsers.ParseString(cells[1]); 
                row.Label = CsvParsers.ParseString(cells[2]); 
                row.Path = CsvParsers.ParseString(cells[3]); 
                list.Add(row);
            }
            return list;
        }

        internal static class CsvParsers
        {
            public static System.Collections.Generic.List<string> SplitCsvLine(string line)
            {
                var list = new System.Collections.Generic.List<string>();
                if (line == null) { list.Add(string.Empty); return list; }
                int i = 0; while (i < line.Length)
                { if (line[i] == ',') { list.Add(string.Empty); i++; continue; } bool quoted = false; if (line[i] == '"') { quoted = true; i++; } var sb = new System.Text.StringBuilder(); while (i < line.Length) { char c = line[i++]; if (quoted) { if (c == '"') { if (i < line.Length && line[i] == '"') { sb.Append('"'); i++; } else { quoted = false; break; } } else sb.Append(c); } else { if (c == ',') break; sb.Append(c); } } list.Add(sb.ToString()); if (!quoted && i < line.Length && line[i] == ',') i++; }
                if (line.EndsWith(",")) list.Add(string.Empty);
                return list;
            }
            public static string ParseString(string s) => s ?? string.Empty;
            public static int ParseInt(string s) => int.TryParse(s, System.Globalization.NumberStyles.Integer, System.Globalization.CultureInfo.InvariantCulture, out var v) ? v : 0;
            public static float ParseFloat(string s) => float.TryParse(s, System.Globalization.NumberStyles.Float | System.Globalization.NumberStyles.AllowThousands, System.Globalization.CultureInfo.InvariantCulture, out var v) ? v : 0f;
            public static bool ParseBool(string s) { if (string.IsNullOrWhiteSpace(s)) return false; s = s.Trim(); return string.Equals(s, "1", System.StringComparison.Ordinal) || string.Equals(s, "true", System.StringComparison.OrdinalIgnoreCase) || string.Equals(s, "yes", System.StringComparison.OrdinalIgnoreCase); }
            public static int[] ParseIntArray(string s) => ParseArray(s, ParseInt);
            public static float[] ParseFloatArray(string s) => ParseArray(s, ParseFloat);
            private static T[] ParseArray<T>(string s, System.Func<string,T> conv) { if (string.IsNullOrEmpty(s)) return System.Array.Empty<T>(); var parts = s.Split(new[] {'|',';'}, System.StringSplitOptions.RemoveEmptyEntries); var arr = new T[parts.Length]; for (int i = 0; i < parts.Length; i++) arr[i] = conv(parts[i]); return arr; }
            public static UnityEngine.Vector2Int ParseV2Int(string s) { if (string.IsNullOrWhiteSpace(s)) return default; var parts = s.Split(new[] {'|',',',' '}, System.StringSplitOptions.RemoveEmptyEntries); int x = parts.Length > 0 ? ParseInt(parts[0]) : 0; int y = parts.Length > 1 ? ParseInt(parts[1]) : 0; return new UnityEngine.Vector2Int(x,y); }
        }
    }
}
